(self.webpackChunk=self.webpackChunk||[]).push([[143],{138:(e,t,r)=>{const s=r(809),{lightningChart:a,SolidFill:o,ColorRGBA:n,AxisScrollStrategies:l,DataPatterns:i,Themes:c}=s,{createProgressiveTraceGenerator:S,createTraceGenerator:d}=r(27),g=a().Dashboard({numberOfRows:3,numberOfColumns:3}),m=[{row:1,col:0},{row:2,col:1},{row:1,col:2},{row:0,col:1},{row:1,col:1}];m.map((e=>{const t=g.createChartXY({columnIndex:e.col,rowIndex:e.row,columnSpan:1,rowSpan:1}),r=(s=["PointSeries","LineSeries"])[Math.round(Math.random()*(s.length-1))];var s;if(e.row==e.col){const e=t["add"+r]();"LineSeries"===r&&e.setCursorSolveBasis("nearest"),d().setNumberOfPoints(1e5).generate().setStreamInterval(50).setStreamBatchSize(10).setStreamRepeat(!0).toStream().forEach((t=>e.add(t)))}else{const s=1==e.col,a={x:0==e.col?-1:1,y:0==e.row?1:-1};let o=t.getDefaultAxisX(),n=t.getDefaultAxisY();e.row==m.reduce(((e,t)=>Math.max(e,t.row)),0)&&(o.dispose(),o=t.addAxisX(!0)),0==e.col&&(n.dispose(),n=t.addAxisY(!0)),a.x<0?o.setInterval(-100,0).setScrollStrategy(s?l.fitting:l.regressive):o.setInterval(0,100).setScrollStrategy(s?l.fitting:l.progressive),a.y<0?n.setInterval(-100,0).setScrollStrategy(s?l.regressive:l.fitting):n.setInterval(0,100).setScrollStrategy(s?l.progressive:l.fitting);const i=t["add"+r](o,n);"LineSeries"===r&&i.setCursorSolveBasis("nearest"),S().setNumberOfPoints(1e5).generate().setStreamInterval(50).setStreamBatchSize(2).setStreamRepeat(!0).toStream().forEach((e=>i.add({x:(s?e.y:e.x)*a.x,y:(s?e.x:e.y)*a.y})))}return t.setTitle(r)}))}},e=>{e.O(0,[736],(()=>(138,e(e.s=138)))),e.O()}]);